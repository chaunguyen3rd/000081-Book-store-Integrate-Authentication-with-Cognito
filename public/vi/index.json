[
{
	"uri": "/vi/1-preparation/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trước khi thực hiện nội dung chính của workshop này, chúng ta cần thiết lập lại ứng dụng web.\nTải source code dưới đây Source code fcj-book-store-sam-ws3.zip (8266 ko) Chạy các câu lệnh dưới đây sam build sam deploy --guided Nhập nội dung như sau: Stack Name []: fcj-book-store AWS Region []: ap-southeast-1 Confirm changes before deploy [Y/n]: y Allow SAM CLI IAM role creation [Y/n]: y Disable rollback [y/N]: n BooksList may not have authorization defined, Is this okay? [y/N]: y BookCreate may not have authorization defined, Is this okay? [y/N]: y BookDelete may not have authorization defined, Is this okay? [y/N]: y Save arguments to configuration file [Y/n]: y Tải code FCJ-Serverless-Workshop về máy của bạn Mở terminal trên máy bạn tại thư mục bạn muốn lưu source code Sao chép câu lệnh dưới đây git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git cd FCJ-Serverless-Workshop yarn build Chúng ta đã build xong front-end. Tiếp theo thực hiện câu lệnh sau để tải thư mục build lên S3 aws s3 cp build s3://fcj-book-store --recursive Vậy là chúng ta đã tạo lại xong ứng dụng web.\n"
},
{
	"uri": "/vi/",
	"title": "Serverless - Xác thực với Amazon Cognito",
	"tags": [],
	"description": "",
	"content": "Serverless - Xác thực với Amazon Cognito Tổng quan Chúng ta đã đi qua 3 bài và xây dựng một ứng dụng web đơn giản với mô hình serverless trên cloud. Để ứng dụng web của chúng ta xác thực, các chức năng chỉ được sử dụng khi người dùng đã đăng nhập. Do đó bài này chúng ta sẽ tìm hiểu về AWS Cognito - cung cấp xác thực, ủy quyền và quản lý người dùng cho ứng dụng web và di động.\nKiến trúc của ứng dụng web sẽ như sau: AWS Cognito AWS Cognito cho phép chúng ta trong việc xây dựng luồng sign-in, sign-up, verify email, thay đổi password, đặt lại password,\u0026hellip; một cách dễ dàng hơn, thay vì ta phải tự xây dựng DB cho user và tự làm nhiều thứ như JWT, hash password, send mail verify,\u0026hellip; Điều này giúp bạn tập chung vào phát triển tính năng khác của ứng dụng. Người dùng có thể đăng nhập trực tiếp bằng tên người dùng và mật khẩu hoặc thông qua bên thứ ba như Facebook, Amazon, Google hoặc Apple.\nHai thành phần chính của Amazon Cognito là User pools and Identity pools:\nUser pools: các thư mục người dùng cung cấp tùy chọn đăng ký và đăng nhập cho người dùng ứng dụng web và thiết bị di động của bạn. Sau khi đăng nhập với user pool, người dùng ứng dụng có thể truy cập các tài nguyên mà ứng dụng cho phép Identity pools: cung cấp thông tin xác thực AWS để cấp cho người dùng của bạn quyền truy cập vào các dịch vụ AWS khác. Ví dụ sử dụng user pool và identity pool cùng nhau\nTrong bước đầu tiên, người dùng ứng dụng của bạn đăng nhập thông qua user pool và nhận mã thông báo user pool sdùng sau khi xác thực thành công. Tiếp theo, ứng dụng của bạn trao đổi mã thông báo user pool dùng lấy thông tin đăng nhập AWS thông qua nhóm nhận dạng. Cuối cùng, người dùng ứng dụng của bạn sau đó có thể sử dụng các thông tin đăng nhập AWS đó để truy cập các dịch vụ AWS khác như Amazon S3 hoặc DynamoDB. Nội dung Chuẩn bị Tạo User Pool Tạo API và Lambda function Kiểm tra với front-end Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/2-create-user-pool/",
	"title": "Tạo User Pool",
	"tags": [],
	"description": "",
	"content": " Mở bảng điều khiển của Amazon Cognito\nChọn User pools ở phía menu phía bên trái\nẤn Create user pool Chọn Email\nẤn Next Chọn Custom cho mục Password policy để chỉnh password theo ý bạn muốn\nBỏ chọn Contain at least 1 special character Để 30 ngày hết hạn Kéo xuống, chọn No MFA cho mục Multi-factor authentication\nChọn Email only cho mục Delivery method Ấn Next Để mặc định các tuỳ chọn Kéo xuống dưới, ấn Next Chọn Send email with Cognito\nẤn Next Nhập tên cho user pool, ví dụ: cognito-fcj-book-shop Chọn Public client\nNhập tên cho app client, ví dụ: fcj-book-shop Mở rộng phần Advanced app client settings\nChọn ALLOW_USER_PASSWORD_AUTH Kéo xuống cuối trang và ấn Create user pool Ấn vào user pool vừa tạo\nẤn chọn App intergation Nhấn vào App integration Kéo xuống cuối trang, ghi lại Client ID "
},
{
	"uri": "/vi/3-create-api-and-lambda-function/",
	"title": "Tạo API và Lambda function",
	"tags": [],
	"description": "",
	"content": "Sau khi tạo xong User pool, chúng ta tạo API và Lambda function để xử lý yêu cầu đăng ký và đăng nhập của người dùng.\nMở tệp template.yaml trong source của tệp fcj-book-shop-sam-ws3.zip bạn đã tải ở phần chuẩn bị\nThêm đoạn script sau dưới LambdaInvokePermission Thay tất cả APP_INTERGATION bằng CLIENT_ID đã ghi lại từ bước trước Login: Type: AWS::Serverless::Function Properties: FunctionName: login CodeUri: fcj-book-shop/login Handler: login.lambda_handler Runtime: python3.9 Architectures: - x86_64 Environment: Variables: CLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34; Register: Type: AWS::Serverless::Function Properties: FunctionName: register CodeUri: fcj-book-shop/register Handler: register.lambda_handler Runtime: python3.9 Architectures: - x86_64 Environment: Variables: CLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34; ConfirmUser: Type: AWS::Serverless::Function Properties: FunctionName: confirm_user CodeUri: fcj-book-shop/confirm_user Handler: confirm_user.lambda_handler Runtime: python3.9 Architectures: - x86_64 Environment: Variables: CLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34; Cấu trúc thư mục như sau:\nfcj-book-shop-sam-ws3 ├── fcj-book-shop │ ├── login │ │ └── login.py │ ├── register │ │ └── register.py │ ├── confirm_user │ │ └── confirm_user.py │ ├── ... │ └── template.yaml Tạo thư mục tên login trong thư mục fcj-book-shop-sam-ws3/fcj-book-shop/ Tạo tệp login.py và sao chép đoạn code sau vào nó import json import boto3 import botocore.exceptions import os client = boto3.client(\u0026#39;cognito-idp\u0026#39;) def initiate_auth(client_id, username, password): try: response = client.initiate_auth( AuthFlow=\u0026#39;USER_PASSWORD_AUTH\u0026#39;, ClientId=client_id, AuthParameters={ \u0026#34;USERNAME\u0026#34;: username, \u0026#34;PASSWORD\u0026#34;: password, } ) print(response) except Exception as e: return None, e.__str__() return response, None def lambda_handler(event, context): user_infor = json.loads(event[\u0026#39;body\u0026#39;]) error = \u0026#34;\u0026#34; message = \u0026#34;\u0026#34; client_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;) resp, msg = initiate_auth(client_id, user_infor[\u0026#39;username\u0026#39;], user_infor[\u0026#39;password\u0026#39;]) print(resp) if msg is not None: message = \u0026#34;Login fail!\u0026#34; statusCode = 400 elif resp[\u0026#34;AuthenticationResult\u0026#34;]: message = \u0026#34;Login sccessful!\u0026#34; statusCode = 200 else: message = \u0026#34;Login fail!\u0026#34; statusCode = 400 # TODO implement return { \u0026#39;statusCode\u0026#39;: statusCode, \u0026#39;body\u0026#39;: message, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34; } } Tạo thư mục tên register trong thư mục fcj-book-shop-sam-ws3/fcj-book-shop/ Tạo tệp register.py và sao chép đoạn code sau vào nó import json import boto3 import os client = boto3.client(\u0026#39;cognito-idp\u0026#39;) def lambda_handler(event, context): user_infor = json.loads(event[\u0026#39;body\u0026#39;]) client_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;) error = None try: resp = client.sign_up( ClientId=client_id, Username=user_infor[\u0026#39;username\u0026#39;], Password=user_infor[\u0026#39;password\u0026#39;] ) except Exception as e: error = e.__str__() if error is None: message = \u0026#34;Register successful!\u0026#34; statusCode = 200 else: message = \u0026#34;Register fail!\u0026#34; statusCode = 400 print(error) # TODO implement return { \u0026#39;statusCode\u0026#39;: statusCode, \u0026#39;body\u0026#39;: message, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34; }, } Tạo thư mục tên confirm_user trong thư mục fcj-book-shop-sam-ws3/fcj-book-shop/ Tạo tệp confirm_user.py và sao chép đoạn code sau vào nó import json import boto3 import os client = boto3.client(\u0026#39;cognito-idp\u0026#39;) def lambda_handler(event, context): user_infor = json.loads(event[\u0026#39;body\u0026#39;]) client_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;) user_pool_id = os.getenv(\u0026#34;USER_POOL_ID\u0026#34;) error = None try: resp = client.confirm_sign_up( ClientId=client_id, Username=user_infor[\u0026#39;username\u0026#39;], ConfirmationCode=user_infor[\u0026#39;code\u0026#39;] ) except Exception as e: error = e.__str__() if error is None: message = \u0026#34;Confirm successful!\u0026#34; statusCode = 200 else: message = \u0026#34;Confirm fail!\u0026#34; statusCode = 400 print(error) # TODO implement return { \u0026#39;statusCode\u0026#39;: statusCode, \u0026#39;body\u0026#39;: message, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34; }, } Chạy các dòng lệnh dưới đây:\nsam build sam deploy --guided Thêm đoạn script sau vào sau method delete của BookApi\n/login: post: responses: \u0026#34;200\u0026#34;: description: 200 response headers: Access-Control-Allow-Origin: type: string x-amazon-apigateway-integration: uri: Fn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations\u0026#34; responses: default: statusCode: 200 responseParameters: method.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; passthroughBehavior: when_no_match httpMethod: POST #always POST type: aws_proxy /register: post: responses: \u0026#34;200\u0026#34;: description: 200 response headers: Access-Control-Allow-Origin: type: string x-amazon-apigateway-integration: uri: Fn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Register.Arn}/invocations\u0026#34; responses: default: statusCode: 200 responseParameters: method.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; passthroughBehavior: when_no_match httpMethod: POST #always POST type: aws_proxy /confirm_user: post: responses: \u0026#34;200\u0026#34;: description: 200 response headers: Access-Control-Allow-Origin: type: string x-amazon-apigateway-integration: uri: Fn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmUser.Arn}/invocations\u0026#34; responses: default: statusCode: 200 responseParameters: method.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; passthroughBehavior: when_no_match httpMethod: POST #always POST type: aws_proxy Thêm đoạn script sau vào function Login\nEvents: Login: Type: Api Properties: Path: /login/ Method: post RestApiId: Ref: BookApi Thêm đoạn script sau vào function Register\nEvents: Register: Type: Api Properties: Path: /register/ Method: post RestApiId: Ref: BookApi ![DeployFunction](/images/1/20.png?width=90pc) Thêm đoạn script sau vào function ConfirmUser Events: ConfirmUser: Type: Api Properties: Path: /confirm_user/ Method: post RestApiId: Ref: BookApi Chạy các dòng lệnh dưới đây: sam build sam deploy --guided Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;Login may not have authorization defined, Is this okay? [y/N]: \u0026quot; Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;Register may not have authorization defined, Is this okay? [y/N]: \u0026quot; Nhập \u0026ldquo;y\u0026rdquo; nếu được hỏi \u0026ldquo;ConfirmUser may not have authorization defined, Is this okay? [y/N]: \u0026quot; Chúng ta đã hoàn thành việc triển khai các API và Lambda function. "
},
{
	"uri": "/vi/4-test-front-end/",
	"title": "Kiểm tra hoạt động",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ thử đăng ký và đăng nhập từ ứng dụng web để kiểm tra hoạt động của API Gateway, Lambda function và User pool\nMở bảng điều khiển của API Gateway\nẤn vào API Gateway REST API to Lambda Chọn Stage ở menu phía bên trái\nẤn staging Ghi lại InvokeURL Mở tệp config.js trong thư mục source code của ứng dụng - FCJ-Serverless-Workshop\nThay APP_API_URL bằng InvokeURL Chạy các dòng lệnh dưới đây:\nyarn build aws s3 cp build s3://fcj-book-store --recursive Mở bảng điều khiển Amazon S3. Ấn chọn bucket fcj-book-store Chọn tab Properties. Kéo xuống cuối tramg, nhấn vào endpoint của web Ấn Register góc bên phải Nhập thông tin đăng ký email, mật khẩu và nhập lại mật khẩu\nẤn nút Register Bạn sẽ gặp thông báo Register fail\nLỗi do API của chúng ta thiếu Access-Control-Allow-Headers trong headers của phản hồi Đăng ký bằng email mà bạn đang dùng để có thể lấy được code xác thực tài khoản\nĐể giải quyết lỗi này, mở tệp template.yaml trong source của tệp fcj-book-store-sam-ws3.zip\nThêm đoạn script sau cho BookApi AllowMethods: \u0026#34;\u0026#39;GET,POST,OPTIONS,DELETE\u0026#39;\u0026#34; AllowHeaders: \u0026#34;\u0026#39;content-type\u0026#39;\u0026#34; AllowOrigin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; Chạy các câu lệnh sau: sam build sam deploy --guided Quay lại màn hình đăng ký và ấn Register Trở lại với bảng điều khiển của Amazon Cognito\nTại tab Users, xuất hiên một người dùng nhưng vẫn ở trạng thái Unconfirmed Mở email mà bạn vừa đăng ký tài khoản, lấy mã xác nhận được gửi từ no-reply@verificationemail.com\nNhập mã xác nhận vào màn hình xác thực\nẤn Submit Trở lại với bảng điều khiển của Amazon Cognito\nNgười dùng đã chuyển sang trạng thái Confirmed Nhập thông tin tài khoản: email, mật khẩu để đăng nhập\nẤn Submit Sau khi đăng nhập thành công, các tính năng: Create new book, Management, Order xuất hiện cho phép người dùng sử dụng "
},
{
	"uri": "/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " Làm rỗng S3 bucket Mở bảng điều khiển của AWS S3 Chọn fcj-book-store Ấn Empty Nhập permanently delete Ấn Empty Làm tương tự với bucket bắt đầu bằng aws-sam-cli-managed-default- Xoá stack của CloudFormation Chạy câu lệnh dưới đây để xoá ứng dụng AWS SAM sam delete --stack-name fcj-book-store sam delete --stack-name aws-sam-cli-managed-default "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]