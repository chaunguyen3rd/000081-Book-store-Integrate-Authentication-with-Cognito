[
{
	"uri": "/1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Before we get to the main content of this workshop, we need to reset the web application.\nDownload the below source code Source code fcj-book-store-sam-ws3.zip (8266 ko) Run the below commands sam build sam deploy --guided Enter the following content: Stack Name []: fcj-book-store AWS Region []: ap-southeast-1 Confirm changes before deploy [Y/n]: y Allow SAM CLI IAM role creation [Y/n]: y Disable rollback [y/N]: n BooksList may not have authorization defined, Is this okay? [y/N]: y BookCreate may not have authorization defined, Is this okay? [y/N]: y BookDelete may not have authorization defined, Is this okay? [y/N]: y Save arguments to configuration file [Y/n]: y Download the FCJ-Serverless-Workshop code to your device Open a terminal on your computer in the folder where you want to save the source code Copy the below command git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop.git cd FCJ-Serverless-Workshop yarn build We have finished building the front-end. Next execute the following command to upload the build folder to S3 aws s3 cp build s3://fcj-book-store --recursive So we have rebuilt the web application.\n"
},
{
	"uri": "/",
	"title": "Serverless - Authentication with Amazon Cognito",
	"tags": [],
	"description": "",
	"content": "Serverless - Authentication with Amazon Cognito Overview We went through 3 workshops and built a simple web application with the serverless model in the cloud. For our web application to authenticate, the functions are only used when the user is logged in. So in this workshop, we\u0026rsquo;ll learn about AWS Cognito - which provides authentication, authorization, and user management for web and mobile applications.\nThe architecture of the web application will look like this: AWS Cognito AWS Cognito allows us to easily build a flow of sign-in, sign-up, verify email, change password, reset password, etc., instead of having to build DB for users and do many things yourself like JWT, hash password, send mail verify,\u0026hellip; This helps you focus on developing other features of the application. Users can log in directly with a username and password or through a third party like Facebook, Amazon, Google, or Apple.\nThe two main components of Amazon Cognito are User pools and Identity pools:\nUser pools: user directories provide registration and login options for your web and mobile app users. After logging in with the user pool, the application users can access the resources that the application allows Identity pools: grant your users access to other AWS services An Amazon Cognito user pool and identity pool used together:\nIn the first step your app user signs in through a user pool and receives user pool tokens after a successful authentication. Next, your app exchanges the user pool tokens for AWS credentials through an identity pool. Finally, your app user can then use those AWS credentials to access other AWS services such as Amazon S3 or DynamoDB. Content Preparation Create User Pool Create API and Lambda function Test with front-end Cleanup "
},
{
	"uri": "/2-create-user-pool/",
	"title": "Create User Pool",
	"tags": [],
	"description": "",
	"content": " Open Amazon Cognito console\nSelect User pools on the left menu.\nClick Create user pool Select Email\nClick Next Select Custom for Password policy pattern to customize the password as you want\nUncheck Contain at least 1 special character Set 30 for expiration date Scroll down, select No MFA for Multi-factor authentication pattern\nSelect Email only for Delivery method pattern Click Next Leave the options as default Scroll down, click Next Select Send email with Cognito\nClick Next Enter user pool name, such as: cognito-fcj-book-shop Select Public client\nEnter app client name, such as: fcj-book-shop Expand the Advanced app client settings pattern\nSelect ALLOW_USER_PASSWORD_AUTH Scroll down to bottom and click Next Click on the user pool you just created\nClick Create user pool tab Click the App integration Scroll down to the bottom, record the Client ID "
},
{
	"uri": "/3-create-api-and-lambda-function/",
	"title": "Create API and Lambda function",
	"tags": [],
	"description": "",
	"content": "After creating the User pool, we create an API and a Lambda function to handle user registration and login requests.\nOpen template.yaml file in source of fcj-book-shop-sam-ws3.zip file that downloaded in preparation\nAdd the following script under the LambdaInvokePermission Replace all APP_INTERGATION with CLIENT_ID which recorded from the previous step Login: Type: AWS::Serverless::Function Properties: FunctionName: login CodeUri: fcj-book-shop/login Handler: login.lambda_handler Runtime: python3.9 Architectures: - x86_64 Environment: Variables: CLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34; Register: Type: AWS::Serverless::Function Properties: FunctionName: register CodeUri: fcj-book-shop/register Handler: register.lambda_handler Runtime: python3.9 Architectures: - x86_64 Environment: Variables: CLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34; ConfirmUser: Type: AWS::Serverless::Function Properties: FunctionName: confirm_user CodeUri: fcj-book-shop/confirm_user Handler: confirm_user.lambda_handler Runtime: python3.9 Architectures: - x86_64 Environment: Variables: CLIENT_ID: \u0026#34;APP_INTERGATION\u0026#34; The directory structure is as follows:\nfcj-book-shop-sam-ws3 ├── fcj-book-shop │ ├── login │ │ └── login.py │ ├── register │ │ └── register.py │ ├── confirm_user │ │ └── confirm_user.py │ ├── ... │ └── template.yaml Create login folder in fcj-book-shop-sam-ws3/fcj-book-shop/ folder Create login.py file and copy the following code to it import json import boto3 import botocore.exceptions import os client = boto3.client(\u0026#39;cognito-idp\u0026#39;) def initiate_auth(client_id, username, password): try: response = client.initiate_auth( AuthFlow=\u0026#39;USER_PASSWORD_AUTH\u0026#39;, ClientId=client_id, AuthParameters={ \u0026#34;USERNAME\u0026#34;: username, \u0026#34;PASSWORD\u0026#34;: password, } ) print(response) except Exception as e: return None, e.__str__() return response, None def lambda_handler(event, context): user_infor = json.loads(event[\u0026#39;body\u0026#39;]) error = \u0026#34;\u0026#34; message = \u0026#34;\u0026#34; client_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;) resp, msg = initiate_auth(client_id, user_infor[\u0026#39;username\u0026#39;], user_infor[\u0026#39;password\u0026#39;]) print(resp) if msg is not None: message = \u0026#34;Login fail!\u0026#34; statusCode = 400 elif resp[\u0026#34;AuthenticationResult\u0026#34;]: message = \u0026#34;Login sccessful!\u0026#34; statusCode = 200 else: message = \u0026#34;Login fail!\u0026#34; statusCode = 400 # TODO implement return { \u0026#39;statusCode\u0026#39;: statusCode, \u0026#39;body\u0026#39;: message, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34; } } Create register folder in fcj-book-shop-sam-ws3/fcj-book-shop/ folder Create register.py file and copy the following code to it import json import boto3 import os client = boto3.client(\u0026#39;cognito-idp\u0026#39;) def lambda_handler(event, context): user_infor = json.loads(event[\u0026#39;body\u0026#39;]) client_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;) error = None try: resp = client.sign_up( ClientId=client_id, Username=user_infor[\u0026#39;username\u0026#39;], Password=user_infor[\u0026#39;password\u0026#39;] ) except Exception as e: error = e.__str__() if error is None: message = \u0026#34;Register successful!\u0026#34; statusCode = 200 else: message = \u0026#34;Register fail!\u0026#34; statusCode = 400 print(error) # TODO implement return { \u0026#39;statusCode\u0026#39;: statusCode, \u0026#39;body\u0026#39;: message, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34; }, } Create confirm_user folder in fcj-book-shop-sam-ws3/fcj-book-shop/ folder Create confirm_user.py file and copy the following code to it import json import boto3 import os client = boto3.client(\u0026#39;cognito-idp\u0026#39;) def lambda_handler(event, context): user_infor = json.loads(event[\u0026#39;body\u0026#39;]) client_id = os.getenv(\u0026#34;CLIENT_ID\u0026#34;) user_pool_id = os.getenv(\u0026#34;USER_POOL_ID\u0026#34;) error = None try: resp = client.confirm_sign_up( ClientId=client_id, Username=user_infor[\u0026#39;username\u0026#39;], ConfirmationCode=user_infor[\u0026#39;code\u0026#39;] ) except Exception as e: error = e.__str__() if error is None: message = \u0026#34;Confirm successful!\u0026#34; statusCode = 200 else: message = \u0026#34;Confirm fail!\u0026#34; statusCode = 400 print(error) # TODO implement return { \u0026#39;statusCode\u0026#39;: statusCode, \u0026#39;body\u0026#39;: message, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,X-Access-Token, XKey, Authorization\u0026#34;, \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,PUT,POST,DELETE,OPTIONS\u0026#34; }, } Run the below commands:\nsam build sam deploy --guided Add the following script under the delete method of BookApi\n/login: post: responses: \u0026#34;200\u0026#34;: description: 200 response headers: Access-Control-Allow-Origin: type: string x-amazon-apigateway-integration: uri: Fn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations\u0026#34; responses: default: statusCode: 200 responseParameters: method.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; passthroughBehavior: when_no_match httpMethod: POST #always POST type: aws_proxy /register: post: responses: \u0026#34;200\u0026#34;: description: 200 response headers: Access-Control-Allow-Origin: type: string x-amazon-apigateway-integration: uri: Fn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Register.Arn}/invocations\u0026#34; responses: default: statusCode: 200 responseParameters: method.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; passthroughBehavior: when_no_match httpMethod: POST #always POST type: aws_proxy /confirm_user: post: responses: \u0026#34;200\u0026#34;: description: 200 response headers: Access-Control-Allow-Origin: type: string x-amazon-apigateway-integration: uri: Fn::Sub: \u0026#34;arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmUser.Arn}/invocations\u0026#34; responses: default: statusCode: 200 responseParameters: method.response.header.Access-Control-Allow-Origin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; passthroughBehavior: when_no_match httpMethod: POST #always POST type: aws_proxy Add the following script under the Login function\nEvents: Login: Type: Api Properties: Path: /login/ Method: post RestApiId: Ref: BookApi Add the following script under the Register function Events: Register: Type: Api Properties: Path: /register/ Method: post RestApiId: Ref: BookApi Add the following script under the ConfirmUser function Events: ConfirmUser: Type: Api Properties: Path: /confirm_user/ Method: post RestApiId: Ref: BookApi Run the below commands:\nsam build sam deploy --guided Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;Login may not have authorization defined, Is this okay? [y/N]: \u0026quot; Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;Register may not have authorization defined, Is this okay? [y/N]: \u0026quot; Enter \u0026ldquo;y\u0026rdquo; if asked \u0026ldquo;ConfirmUser may not have authorization defined, Is this okay? [y/N]: \u0026quot; We have completed the implementation of the APIs and Lambda functions. "
},
{
	"uri": "/4-test-front-end/",
	"title": "Test with front-end",
	"tags": [],
	"description": "",
	"content": "We will try registration and login from web application to test API Gateway, Lambda function and User pool working.\nOpen API Gateway console\nClick API Gateway REST API to Lambda Select Stage on the left menu\nClick staging Record InvokeURL Open config.js file in source code folder of application - FCJ-Serverless-Workshop\nReplace APP_API_URL with InvokeURL Run the below commands:\nyarn build aws s3 cp build s3://fcj-book-store --recursive Open Amazon S3 console. Click fcj-book-store bucket Click Properties tab. Scroll down to bottom, click to web endpoint Click Register on right corner Enter registration information: email, password and re-enter password\nClick Register button A prompt will appear displaying the Register fail\nThe error due our API missing Access-Control-Allow-Headers in response headers Register with the email you are using to get the account verification code\nTo resolve this error, open template.yaml file in source of fcj-book-store-sam-ws3.zip file\nAdd the below script for BookApi AllowMethods: \u0026#34;\u0026#39;GET,POST,OPTIONS,DELETE\u0026#39;\u0026#34; AllowHeaders: \u0026#34;\u0026#39;content-type\u0026#39;\u0026#34; AllowOrigin: \u0026#34;\u0026#39;*\u0026#39;\u0026#34; Run the following commands: sam build sam deploy --guided Go back to the registration screen and click Register button Back to the Amazon Cognito console\nAt Users tab, display a user but still in Unconfirmed state Open the email you just registered for an account, get the confirmation code sent from no-reply@verificationemail.com\nEnter the confirmation code in the verification screen\nClick Submit Back to the Amazon Cognito console\nState of user changed to Confirmed Enter account information: email, password to login\nClick Submit After successful login, the features: Create new book, Management, Order appear allowing users to use "
},
{
	"uri": "/5-cleanup/",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": " Empty S3 bucket Open AWS S3 console Select fcj-book-store Click Empty Enter permanently delete Click Empty Do the same for bucket starting with aws-sam-cli-managed-default- Delete CloudFormation stacks Execute the below command to delete the AWS SAM application sam delete --stack-name fcj-book-store sam delete --stack-name aws-sam-cli-managed-default "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]